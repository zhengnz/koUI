// Generated by CoffeeScript 1.10.0
(function() {
  var ko, template, viewModel;

  ko = require('knockout');

  template = require('../tpl/input.html');

  viewModel = (function() {
    function viewModel(params, componentInfo) {
      var can_use_placeholder, ieVersion, ref, ref1;
      ieVersion = (ref = ko.utils.ieVersion) != null ? ref : 10;
      can_use_placeholder = ieVersion > 9;
      this.disposes = [];
      this.type = ko.observable(ko.unwrap(params.type || 'text'));
      this.size = ko.computed(function() {
        return ko.unwrap(params.size || null);
      });
      this.width = ko.computed(function() {
        var w;
        w = ko.unwrap(params.width || '100%');
        return componentInfo.element.firstChild.style['width'] = w;
      });
      this.placeholder = ko.computed(function() {
        return ko.unwrap(params.placeholder || null);
      });
      this.focus = ko.observable(ko.unwrap(params.hasFocus || false));
      this.disposes.push(this.focus.subscribe((function(_this) {
        return function(v) {
          if (ko.isObservable(params.hasFocus)) {
            return params.hasFocus(v);
          }
        };
      })(this)));
      this.hover = ko.observable(false);
      this.visible = ko.pureComputed((function(_this) {
        return function() {
          var ref1;
          return ko.unwrap((ref1 = params.visible) != null ? ref1 : true);
        };
      })(this));
      this.disable = ko.pureComputed((function(_this) {
        return function() {
          return ko.unwrap(params.disable || false);
        };
      })(this));
      this.origin_type = this.type();
      params.value = (ref1 = params.value) != null ? ref1 : ko.observable(null);
      this.value = ko.computed({
        read: function() {
          var value;
          value = ko.unwrap(params.value || null);
          if (!can_use_placeholder && !value && !this.focus()) {
            if (this.type() === 'password') {
              this.type('text');
            }
            return this.placeholder();
          }
          if (this.type() !== this.origin_type) {
            this.type(this.origin_type);
          }
          return value;
        },
        write: function(value) {
          if (ko.isObservable(params.value)) {
            return params.value(value);
          }
        },
        owner: this
      });
      this.right_icon = ko.pureComputed((function(_this) {
        return function() {
          var icon;
          icon = ko.unwrap(params.rightIcon || null);
          if (icon == null) {
            return null;
          }
          return "iconfont icon-" + icon + " right";
        };
      })(this));
      this.right_icon_text = ko.pureComputed((function(_this) {
        return function() {
          return ko.unwrap(params.rightIconText || null);
        };
      })(this));
      this.left_icon = ko.pureComputed((function(_this) {
        return function() {
          var icon;
          icon = ko.unwrap(params.leftIcon || null);
          if (icon == null) {
            return null;
          }
          return "iconfont icon-" + icon + " left";
        };
      })(this));
      this.left_icon_text = ko.pureComputed((function(_this) {
        return function() {
          return ko.unwrap(params.leftIconText || null);
        };
      })(this));
      this.disposes = this.disposes.concat([this.size, this.width, this.placeholder, this.visible, this.disable, this.value, this.right_icon, this.right_icon_text, this.left_icon, this.left_icon_text]);
    }

    viewModel.prototype.dispose = function() {
      return ko.utils.arrayForEach(this.disposes, function(obj) {
        return obj.dispose();
      });
    };

    return viewModel;

  })();

  ko.components.register('ko-input', {
    viewModel: {
      createViewModel: function(params, componentInf) {
        return new viewModel(params, componentInf);
      }
    },
    template: template
  });

}).call(this);

//# sourceMappingURL=input.js.map
