// Generated by CoffeeScript 1.10.0
(function() {
  var animate_show_delay, ko, visible_cls;

  ko = require('knockout');

  require('./Common');

  animate_show_delay = 5;

  visible_cls = 'visible';

  ko.bindingHandlers.transitionIf = {
    init: function(element) {
      var childElements;
      childElements = ko.utils.arrayMap(ko.utils.cloneNodes(ko.virtualElements.childNodes(element), true), function(e) {
        if (e.nodeType === 1) {
          ko.utils.toggleDomNodeCssClass(e, 'init', true);
        }
        return e;
      });
      ko.virtualElements.emptyNode(element);
      ko.utils.domData.set(element, 'childElements', childElements);
      return {
        controlsDescendantBindings: true
      };
    },
    update: function(element, valueAccessor, allBindings, viewModel, bindingContext) {
      var _childElements, childElements, delay, value;
      value = ko.unwrap(valueAccessor());
      childElements = ko.utils.domData.get(element, 'childElements');
      if (value === true) {
        delay = animate_show_delay;
        _childElements = ko.utils.cloneNodes(childElements);
        ko.virtualElements.setDomNodeChildren(element, _childElements);
        ko.utils.arrayForEach(_childElements, function(e) {
          var listener;
          if (e.nodeType !== 1) {
            return;
          }
          listener = function() {
            if (!ko.utils.hasClass(this, visible_cls)) {
              return ko.removeNode(this);
            }
          };
          e.addEventListener('webkitTransitionEnd', listener);
          e.addEventListener('transitionend', listener);
          setTimeout(function() {
            return ko.utils.toggleDomNodeCssClass(e, visible_cls, true);
          }, delay);
          return delay += allBindings.get('transitionShowDelay') || 0;
        });
        return ko.applyBindingsToDescendants(bindingContext, element);
      } else {
        if (ko.virtualElements.childNodes(element).length === 0) {
          return;
        }
        delay = 0;
        return ko.utils.arrayForEach(ko.virtualElements.childNodes(element), function(e) {
          if (e.nodeType !== 1) {
            return;
          }
          setTimeout(function() {
            return ko.utils.toggleDomNodeCssClass(e, visible_cls, false);
          }, delay);
          return delay += allBindings.get('transitionHideDelay') || 0;
        });
      }
    }
  };

  ko.bindingHandlers.transitionIfnot = {
    init: function(element, valueAccessor, allBindings, viewModel, bindingContext) {
      return ko.bindingHandlers.transitionIf.init(element, valueAccessor, allBindings, viewModel, bindingContext);
    },
    update: function(element, valueAccessor, allBindings, viewModel, bindingContext) {
      return ko.bindingHandlers.transitionIf.update(element, function() {
        return !ko.unwrap(valueAccessor());
      }, allBindings, viewModel, bindingContext);
    }
  };

  ko.virtualElements.allowedBindings.transitionIf = true;

  ko.virtualElements.allowedBindings.transitionIfnot = true;

}).call(this);

//# sourceMappingURL=Transition.js.map
